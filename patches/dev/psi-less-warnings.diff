--- psi.orig/iris/src/irisnet/noncore/cutestuff/networkaccessmanager.cpp
+++ psi/iris/src/irisnet/noncore/cutestuff/networkaccessmanager.cpp
@@ -80,11 +80,15 @@ public:
 		QNetworkReply(nam),
 		bs(0)
 	{
-
+		Q_UNUSED(op);//remove me later please
+		Q_UNUSED(req);//remove me later please
+		Q_UNUSED(outgoingData);//remove me later please
 	}
 
 	qint64 readData(char *data, qint64 maxlen)
 	{
+		Q_UNUSED(data);//remove me later please
+		Q_UNUSED(maxlen);//remove me later please
 		return 0;
 	}
 
--- psi.orig/iris/src/xmpp/sasl/scramsha1response.cpp
+++ psi/iris/src/xmpp/sasl/scramsha1response.cpp
@@ -37,6 +37,7 @@ namespace XMPP {
 
 	SCRAMSHA1Response::SCRAMSHA1Response(const QByteArray& server_first_message, const QByteArray& password_in, const QByteArray& client_first_message, const QString &salted_password_base64, const RandomNumberGenerator& rand)
 {
+	Q_UNUSED(rand);
 	QString pass_in(password_in);
 	QString pass_out;
 
--- psi.orig/src/libpsi/tools/globalshortcut/globalshortcutmanager_x11.cpp
+++ psi/src/libpsi/tools/globalshortcut/globalshortcutmanager_x11.cpp
@@ -134,7 +134,7 @@ private:
 		XModifierKeymap* map = XGetModifierMapping(appDpy);
 		if (map) {
 			// XKeycodeToKeysym helper code adapeted from xmodmap
-			int min_keycode, max_keycode, keysyms_per_keycode = 1;
+			int min_keycode, max_keycode, keysyms_per_keycode_return, keysyms_per_keycode = 1;
 			XDisplayKeycodes (appDpy, &min_keycode, &max_keycode);
 			XFree(XGetKeyboardMapping (appDpy, min_keycode, (max_keycode - min_keycode + 1), &keysyms_per_keycode));
 
@@ -142,27 +142,28 @@ private:
 			for (maskIndex = 0; maskIndex < 8; maskIndex++) {
 				for (i = 0; i < map->max_keypermod; i++) {
 					if (map->modifiermap[mapIndex]) {
-						KeySym sym;
+						KeySym *sym = 0;
 						int symIndex = 0;
 						do {
-							sym = XKeycodeToKeysym(appDpy, map->modifiermap[mapIndex], symIndex);
+							sym = XGetKeyboardMapping(appDpy,map->modifiermap[mapIndex], 1, &keysyms_per_keycode_return);
 							symIndex++;
-						} while ( !sym && symIndex < keysyms_per_keycode);
-						if (alt_mask == 0 && (sym == XK_Alt_L || sym == XK_Alt_R)) {
+						} while ( !sym[0] && symIndex < keysyms_per_keycode);
+						if (alt_mask == 0 && (sym[0] == XK_Alt_L || sym[0] == XK_Alt_R)) {
 							alt_mask = 1 << maskIndex;
 						}
-						if (meta_mask == 0 && (sym == XK_Meta_L || sym == XK_Meta_R)) {
+						if (meta_mask == 0 && (sym[0] == XK_Meta_L || sym[0] == XK_Meta_R)) {
 							meta_mask = 1 << maskIndex;
 						}
-						if (super_mask == 0 && (sym == XK_Super_L || sym == XK_Super_R)) {
+						if (super_mask == 0 && (sym[0] == XK_Super_L || sym[0] == XK_Super_R)) {
 							super_mask = 1 << maskIndex;
 						}
-						if (hyper_mask == 0 && (sym == XK_Hyper_L || sym == XK_Hyper_R)) {
+						if (hyper_mask == 0 && (sym[0] == XK_Hyper_L || sym[0] == XK_Hyper_R)) {
 							hyper_mask = 1 << maskIndex;
 						}
-						if (numlock_mask == 0 && (sym == XK_Num_Lock)) {
+						if (numlock_mask == 0 && (sym[0] == XK_Num_Lock)) {
 							numlock_mask = 1 << maskIndex;
 						}
+						XFree(sym);
 					}
 					mapIndex++;
 				}
