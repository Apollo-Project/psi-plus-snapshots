--- psi.orig/iris/src/xmpp/xmpp-im/xmpp_discoext.cpp
+++ psi/iris/src/xmpp/xmpp-im/xmpp_discoext.cpp
@@ -0,0 +1,90 @@
+/*
+ * xmpp_discoext.cpp
+ * Copyright (C) 2013  Aleksey Andreev
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ *
+ */
+
+#include "xmpp_discoext.h"
+
+using namespace XMPP;
+
+DiscoExtension::DiscoExtension()
+	: XData()
+	, valid_(false)
+{
+}
+
+DiscoExtension::DiscoExtension(const QDomElement &e)
+	: XData()
+	, valid_(false)
+{
+	fromXml(e);
+}
+
+DiscoExtension::~DiscoExtension()
+{
+}
+
+void DiscoExtension::fromXml(const QDomElement &e)
+{
+	XData::fromXml(e);
+	valid_ = (XData::isValid() && type() == XData::Data_Result && !registrarType().isEmpty());
+}
+
+bool DiscoExtension::isValid() const
+{
+	return valid_;
+}
+
+const QString DiscoExtension::extensionType() const
+{
+	return registrarType();
+}
+
+DiscoExtList::DiscoExtList()
+{
+}
+
+DiscoExtList::~DiscoExtList()
+{
+}
+
+void DiscoExtList::addExtension(DiscoExtension *ext)
+{
+	list_[ext->extensionType()] = DiscoExtPointer(ext);
+}
+
+QStringList DiscoExtList::extensionValues(const QString &etype, const QString vname) const
+{
+	if (list_.contains(etype))
+	{
+		const DiscoExtPointer ext = list_.value(etype);
+		if (!ext.isNull() && ext->isValid())
+		{
+			const XData::Field f = ext->getField(vname);
+			if (f.isValid())
+				return f.value();
+		}
+	}
+	return QStringList();
+}
+
+QString DiscoExtList::extensionValue(const QString &etype, const QString vname) const
+{
+	QStringList vl = extensionValues(etype, vname);
+	return vl.value(0);
+}
--- psi.orig/iris/src/xmpp/xmpp-im/xmpp_discoext.h
+++ psi/iris/src/xmpp/xmpp-im/xmpp_discoext.h
@@ -0,0 +1,63 @@
+/*
+ * xmpp_discoext.h
+ * Copyright (C) 2013  Aleksey Andreev
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ *
+ */
+
+#ifndef XMPP_DISCOEXT
+#define XMPP_DISCOEXT
+
+#include <QString>
+#include <QSharedPointer>
+
+#include "xmpp_xdata.h"
+
+namespace XMPP {
+
+	class DiscoExtension : public XData
+	{
+	public:
+		DiscoExtension();
+		DiscoExtension(const QDomElement &e);
+		~DiscoExtension();
+
+		void fromXml(const QDomElement &);
+		bool isValid() const;
+		const QString extensionType() const;
+
+	private:
+		bool valid_;
+	};
+
+	class DiscoExtList
+	{
+	public:
+		DiscoExtList();
+		~DiscoExtList();
+
+		void addExtension(DiscoExtension *ext);
+		QStringList extensionValues(const QString &etype, const QString vname) const;
+		QString extensionValue(const QString &etype, const QString vname) const;
+
+	private:
+		typedef QSharedPointer<DiscoExtension> DiscoExtPointer;
+		QMap<QString, DiscoExtPointer> list_;
+	};
+
+}
+
+#endif
--- psi.orig/iris/src/xmpp/xmpp-im/xmpp_discoinfotask.cpp
+++ psi/iris/src/xmpp/xmpp-im/xmpp_discoinfotask.cpp
@@ -23,6 +23,7 @@
 #include "xmpp_task.h"
 #include "xmpp/jid/jid.h"
 #include "xmpp_discoitem.h"
+#include "xmpp_discoext.h"
 #include "xmpp_discoinfotask.h"
 #include "xmpp_xmlcommon.h"
 
@@ -134,6 +135,7 @@ bool DiscoInfoTask::take(const QDomEleme
 
 		QStringList features;
 		DiscoItem::Identities identities;
+		DiscoExtList extList;
 
 		for(QDomNode n = q.firstChild(); !n.isNull(); n = n.nextSibling()) {
 			QDomElement e = n.toElement();
@@ -152,10 +154,18 @@ bool DiscoInfoTask::take(const QDomEleme
 
 				identities.append( id );
 			}
+			else {
+				DiscoExtension *ext = new DiscoExtension(e);
+				if (ext->isValid())
+					extList.addExtension(ext);
+				else
+					delete ext;
+			}
 		}
 
 		item.setFeatures( features );
 		item.setIdentities( identities );
+		item.setExtensions( extList );
 
 		d->item = item;
 
--- psi.orig/iris/src/xmpp/xmpp-im/xmpp_discoitem.cpp
+++ psi/iris/src/xmpp/xmpp-im/xmpp_discoitem.cpp
@@ -19,6 +19,7 @@
  */
 
 #include "xmpp_discoitem.h"
+#include "xmpp_discoext.h"
 
 using namespace XMPP;
 
@@ -37,6 +38,7 @@ public:
 
 	Features features;
 	Identities identities;
+	DiscoExtList exts;
 };
 
 DiscoItem::DiscoItem()
@@ -58,6 +60,7 @@ DiscoItem & DiscoItem::operator= (const
 	d->action = from.d->action;
 	d->features = from.d->features;
 	d->identities = from.d->identities;
+	d->exts = from.d->exts;
 
 	return *this;
 }
@@ -167,6 +170,15 @@ void DiscoItem::setIdentities(const Iden
 		setName( i.first().name );
 }
 
+const DiscoExtList &DiscoItem::extensions() const
+{
+	return d->exts;
+}
+
+void DiscoItem::setExtensions(const DiscoExtList &extlist)
+{
+	d->exts = extlist;
+}
 
 DiscoItem::Action DiscoItem::string2action(QString s)
 {
--- psi.orig/iris/src/xmpp/xmpp-im/xmpp_discoitem.h
+++ psi/iris/src/xmpp/xmpp-im/xmpp_discoitem.h
@@ -25,6 +25,7 @@
 
 #include "xmpp/jid/jid.h"
 #include "xmpp_features.h"
+#include "xmpp_discoext.h"
 #include "xmpp_agentitem.h"
 
 namespace XMPP {
@@ -66,6 +67,9 @@ namespace XMPP {
 		const Identities &identities() const;
 		void setIdentities(const Identities &);
 
+		const DiscoExtList &extensions() const;
+		void setExtensions(const DiscoExtList &extlist);
+
 		// some useful helper functions
 		static Action string2action(QString s);
 		static QString action2string(Action a);
--- psi.orig/iris/src/xmpp/xmpp-im/xmpp_tasks.cpp
+++ psi/iris/src/xmpp/xmpp-im/xmpp_tasks.cpp
@@ -760,6 +760,7 @@ bool JT_PushPresence::take(const QDomEle
  			p.setCapsNode(i.attribute("node"));
  			p.setCapsVersion(i.attribute("ver"));
  			p.setCapsExt(i.attribute("ext"));
+			p.setCapsHashAlgorithm(i.attribute("hash"));
   		}
 		else if(i.tagName() == "x" && i.attribute("xmlns") == "vcard-temp:x:update") {
 			QDomElement t;
--- psi.orig/iris/src/xmpp/xmpp-im/xmpp_xdata.cpp
+++ psi/iris/src/xmpp/xmpp-im/xmpp_xdata.cpp
@@ -431,6 +431,19 @@ XData::FieldList XData::fields() const
 	return d->fields;
 }
 
+XData::Field XData::getField(const QString &var) const
+{
+	if ( !d->fields.isEmpty() ) {
+		FieldList::ConstIterator it = d->fields.begin();
+		for ( ; it != d->fields.end(); ++it) {
+			Field f = *it;
+			if (f.isValid() && f.var() == var)
+				return f;
+		}
+	}
+	return Field();
+}
+
 void XData::setFields(const FieldList &f)
 {
 	d->fields = f;
--- psi.orig/iris/src/xmpp/xmpp-im/xmpp_xdata.h
+++ psi/iris/src/xmpp/xmpp-im/xmpp_xdata.h
@@ -161,6 +161,7 @@ namespace XMPP {
 		typedef QList<Field> FieldList;
 
 		FieldList fields() const;
+		Field getField(const QString &var) const;
 		void setFields(const FieldList &);
 
 	private:
--- psi.orig/iris/src/xmpp/xmpp.pri
+++ psi/iris/src/xmpp/xmpp.pri
@@ -68,6 +68,7 @@ HEADERS += \
 	$$PWD/xmpp-im/xmpp_features.h \
 	$$PWD/xmpp-im/xmpp_agentitem.h \
 	$$PWD/xmpp-im/xmpp_discoitem.h \
+	$$PWD/xmpp-im/xmpp_discoext.h \
 	$$PWD/xmpp-im/xmpp_bitsofbinary.h \
 	$$PWD/xmpp-im/im.h
 
@@ -86,6 +87,7 @@ SOURCES += \
 	$$PWD/xmpp-im/client.cpp \
 	$$PWD/xmpp-im/xmpp_features.cpp \
 	$$PWD/xmpp-im/xmpp_discoitem.cpp \
+	$$PWD/xmpp-im/xmpp_discoext.cpp \
 	$$PWD/xmpp-im/xmpp_discoinfotask.cpp \
 	$$PWD/xmpp-im/xmpp_xdata.cpp \
 	$$PWD/xmpp-im/xmpp_task.cpp \
--- psi.orig/src/capabilities/capsmanager.cpp
+++ psi/src/capabilities/capsmanager.cpp
@@ -87,20 +87,20 @@ void CapsManager::setEnabled(bool b)
  * @param ver The entity's caps version
  * @param ext The entity's caps extensions
  */
-void CapsManager::updateCaps(const Jid& jid, const QString& node, const QString& ver, const QString& ext)
+void CapsManager::updateCaps(const Jid& jid, const QString& node, const QString& ver, const QString& ext, const QString& hashAlgo)
 {
 	if (jid.compare(jid_,false))
 		return;
 
-	CapsSpec c(node,ver,ext);
-	CapsSpecs caps = c.flatten();
+	CapsSpec c(node,ver,ext,hashAlgo);
+	QStringList nodes = c.flatten();
 	if (capsSpecs_[jid.full()] != c) {
 		//qDebug() << QString("caps.cpp: Updating caps for %1 (node=%2,ver=%3,ext=%4)").arg(QString(jid.full()).replace('%',"%%")).arg(node).arg(ver).arg(ext);
 
 		// Unregister from all old caps nodes
-		CapsSpecs old_caps = capsSpecs_[jid.full()].flatten();
-		foreach(CapsSpec s, old_caps) {
-			if (s != CapsSpec()) {
+		QStringList old_nodes = capsSpecs_[jid.full()].flatten();
+		foreach(const QString &s, old_nodes) {
+			if (!s.isEmpty()) {
 				capsJids_[s].removeAll(jid.full());
 			}
 		}
@@ -108,7 +108,7 @@ void CapsManager::updateCaps(const Jid&
 		if (!node.isEmpty() && !ver.isEmpty()) {
 			// Register with all new caps nodes
 			capsSpecs_[jid.full()] = c;
-			foreach(CapsSpec s, caps) {
+			foreach(const QString &s, nodes) {
 				if (!capsJids_[s].contains(jid.full())) {
 					capsJids_[s].push_back(jid.full());
 				}
@@ -118,10 +118,10 @@ void CapsManager::updateCaps(const Jid&
 
 			// Register new caps and check if we need to discover features
 			if (isEnabled()) {
-				foreach(CapsSpec s, caps) {
+				foreach(const QString &s, nodes) {
 					if (!registry_->isRegistered(s) && capsJids_[s].count() == 1) {
 						//qDebug() << QString("caps.cpp: Sending disco request to %1, node=%2").arg(QString(jid.full()).replace('%',"%%")).arg(node + "#" + s.extensions());
-						discoInfoQuerier_->getDiscoInfo(jid,node + '#' + s.extensions());
+						discoInfoQuerier_->getDiscoInfo(jid,s);
 					}
 				}
 			}
@@ -134,7 +134,7 @@ void CapsManager::updateCaps(const Jid&
 	}
 	else {
 		// Add to the list of jids
-		foreach(CapsSpec s, caps) {
+		foreach(const QString &s, nodes) {
 			capsJids_[s].push_back(jid.full());
 		}
 	}
@@ -149,9 +149,9 @@ void CapsManager::disableCaps(const Jid&
 {
 	//qDebug() << QString("caps.cpp: Disabling caps for %1.").arg(QString(jid.full()).replace('%',"%%"));
 	if (capsEnabled(jid)) {
-		CapsSpecs cs = capsSpecs_[jid.full()].flatten();
-		foreach(CapsSpec s, cs) {
-			if (s != CapsSpec()) {
+		QStringList nodes = capsSpecs_[jid.full()].flatten();
+		foreach(const QString &s, nodes) {
+			if (!s.isEmpty()) {
 				capsJids_[s].removeAll(jid.full());
 			}
 		}
@@ -175,7 +175,7 @@ void CapsManager::getDiscoInfo_success(c
 	if (!ok) {
 		return;
 	}
-	registry_->registerCaps(cs,item.identities(),item.features().list());
+	registry_->registerCaps(cs,item.identities(),item.features().list(),item.extensions());
 }
 
 void CapsManager::getDiscoInfo_error(const XMPP::Jid& jid, const QString& node, int, const QString&)
@@ -193,11 +193,11 @@ CapsSpec CapsManager::getCapsSpecForNode
 		return CapsSpec();
     }
 	QString node = disco_node.left(hash_index);
-	QString ext = disco_node.right(disco_node.length() - hash_index - 1);
+	QString ver = disco_node.right(disco_node.length() - hash_index - 1);
 	CapsSpec jid_cs = capsSpecs_[jid.full()];
 	if (jid_cs.node() == node) {
 		ok = true;
-		return CapsSpec(node,jid_cs.version(),ext);
+		return CapsSpec(node,ver,QString(),QString());
 	}
 	else {
 		ok = false;
@@ -212,7 +212,7 @@ CapsSpec CapsManager::getCapsSpecForNode
 void CapsManager::capsRegistered(const CapsSpec& cs)
 {
 	// Notify affected jids.
-	foreach(QString s, capsJids_[cs]) {
+	foreach(const QString &s, capsJids_[cs.flatten(false).first()]) {
 		//qDebug() << QString("caps.cpp: Notifying %1.").arg(s.replace('%',"%%"));
 		emit capsChanged(s);
 	}
@@ -235,8 +235,8 @@ XMPP::Features CapsManager::features(con
 	//qDebug() << "caps.cpp: Retrieving features of " << jid.full();
 	QStringList f;
 	if (capsEnabled(jid)) {
-		CapsSpecs cs = capsSpecs_[jid.full()].flatten();
-		foreach(CapsSpec s, cs) {
+		QStringList nodes = capsSpecs_[jid.full()].flatten();
+		foreach(const QString &s, nodes) {
 			//qDebug() << QString("    %1").arg(registry_->features(s).list().join("\n"));
 			f += registry_->features(s).list();
 		}
@@ -251,11 +251,17 @@ XMPP::Features CapsManager::features(con
 QString CapsManager::clientName(const Jid& jid) const
 {
 	if (capsEnabled(jid)) {
-		QString name;
 		CapsSpec cs = capsSpecs_[jid.full()];
-		const DiscoItem::Identities& i = registry_->identities(CapsSpec(cs.node(),cs.version(),cs.version()));
-		if (i.count() > 0) {
-			name = i.first().name;
+		QString cs_str = cs.flatten(false).first();
+
+		QString name;
+		name = registry_->extensions(cs_str).extensionValue("urn:xmpp:dataforms:softwareinfo", "software");
+
+		if (name.isEmpty()) {
+			const DiscoItem::Identities& i = registry_->identities(cs_str);
+			if (i.count() > 0) {
+				name = i.first().name;
+			}
 		}
 
 		// Try to be intelligent about the name
@@ -284,5 +290,34 @@ QString CapsManager::clientName(const Ji
  */
 QString CapsManager::clientVersion(const Jid& jid) const
 {
-	return (capsEnabled(jid) ? capsSpecs_[jid.full()].version() : QString());
+	if (!capsEnabled(jid))
+		return QString();
+
+	const CapsSpec &cs = capsSpecs_[jid.full()];
+	QString version = registry_->extensions(cs.flatten(false).first()).extensionValue("urn:xmpp:dataforms:softwareinfo", "software_version");
+
+	if (version.isEmpty())
+		version = cs.version();
+
+	return version;
+}
+
+/**
+ * \brief Returns the OS version of a given jid.
+ */
+QString CapsManager::osVersion(const Jid &jid) const
+{
+	QString os_str;
+	if (capsEnabled(jid)) {
+		const CapsSpec &cs = capsSpecs_[jid.full()];
+		XMPP::DiscoExtList el = registry_->extensions(cs.flatten(false).first());
+		os_str = el.extensionValue("urn:xmpp:dataforms:softwareinfo", "os").trimmed();
+		if (!os_str.isEmpty()) {
+			QString os_ver = el.extensionValue("urn:xmpp:dataforms:softwareinfo", "os_version").trimmed();
+			if (!os_ver.isEmpty())
+				os_str.append(" " + os_ver);
+
+		}
+	}
+	return os_str;
 }
--- psi.orig/src/capabilities/capsmanager.h
+++ psi/src/capabilities/capsmanager.h
@@ -48,12 +48,13 @@ public:
 	bool isEnabled();
 	void setEnabled(bool);
 
-	void updateCaps(const Jid& jid, const QString& node, const QString& ver, const QString& ext);
+	void updateCaps(const Jid& jid, const QString& node, const QString& ver, const QString& ext, const QString& hashAlgo);
 	void disableCaps(const Jid& jid);
 	bool capsEnabled(const Jid& jid) const;
 	XMPP::Features features(const Jid& jid) const;
 	QString clientName(const Jid& jid) const;
 	QString clientVersion(const Jid& jid) const;
+	QString osVersion(const Jid& jid) const;
 
 signals:
 	/**
@@ -76,7 +77,7 @@ private:
 	QPointer<Protocol::DiscoInfoQuerier> discoInfoQuerier_;
 	bool isEnabled_;
 	QMap<QString,CapsSpec> capsSpecs_;
-	QMap<CapsSpec,QList<QString> > capsJids_;
+	QMap<QString,QList<QString> > capsJids_;
 };
 
 
--- psi.orig/src/capabilities/capsregistry.cpp
+++ psi/src/capabilities/capsregistry.cpp
@@ -47,6 +47,11 @@ const DiscoItem::Identities& CapsRegistr
 	return identities_;
 }
 
+const XMPP::DiscoExtList& CapsRegistry::CapsInfo::extensions() const
+{
+	return extensions_;
+}
+
 void CapsRegistry::CapsInfo::setIdentities(const DiscoItem::Identities& i)
 {
 	identities_ = i;
@@ -57,6 +62,11 @@ void CapsRegistry::CapsInfo::setFeatures
 	features_ = f;
 }
 
+void CapsRegistry::CapsInfo::setExtensions(const XMPP::DiscoExtList& exts)
+{
+	extensions_ = exts;
+}
+
 void CapsRegistry::CapsInfo::updateLastSeen()
 {
 	lastSeen_ = QDateTime::currentDateTime();
@@ -146,12 +156,10 @@ void CapsRegistry::save(QIODevice& out)
 	QDomDocument doc;
 	QDomElement capabilities = doc.createElement("capabilities");
 	doc.appendChild(capabilities);
-	QMap<CapsSpec,CapsInfo>::ConstIterator i = capsInfo_.begin();
+	QMap<QString,CapsInfo>::ConstIterator i = capsInfo_.begin();
 	for( ; i != capsInfo_.end(); i++) {
 		QDomElement info = i.value().toXml(&doc);
-		info.setAttribute("node",i.key().node());
-		info.setAttribute("ver",i.key().version());
-		info.setAttribute("ext",i.key().extensions());
+		info.setAttribute("node",i.key());
 		capabilities.appendChild(info);
 	}
 
@@ -199,9 +207,15 @@ void CapsRegistry::load(QIODevice& in)
 		if(i.tagName() == "info") {
 			CapsInfo info;
 			info.fromXml(i);
-			CapsSpec spec(i.attribute("node"),i.attribute("ver"),i.attribute("ext"));
-			capsInfo_[spec] = info;
-			//qDebug() << QString("Read %1 %2 %3").arg(spec.node()).arg(spec.version()).arg(spec.extensions());
+			QString node = i.attribute("node");
+			int sep = node.indexOf('#');
+			if (sep > 0 && sep + 1 < node.length()) {
+				capsInfo_[node] = info;
+				//qDebug() << QString("Read %1 %2").arg(node).arg(ver);
+			}
+			else {
+				qWarning() << "capsregistry.cpp: Node" << node << "invalid";
+			}
 		}
 		else {
 			qWarning("capsregistry.cpp: Unknown element");
@@ -212,13 +226,15 @@ void CapsRegistry::load(QIODevice& in)
 /**
  * \brief Registers capabilities of a client.
  */
-void CapsRegistry::registerCaps(const CapsSpec& spec,const XMPP::DiscoItem::Identities& identities,const XMPP::Features& features)
+void CapsRegistry::registerCaps(const CapsSpec& spec,const XMPP::DiscoItem::Identities& identities,const XMPP::Features& features,const XMPP::DiscoExtList& exts)
 {
-	if (!isRegistered(spec)) {
+	QString dnode = spec.flatten(false).first();
+	if (!isRegistered(dnode)) {
 		CapsInfo info;
 		info.setIdentities(identities);
 		info.setFeatures(features);
-		capsInfo_[spec] = info;
+		info.setExtensions(exts);
+		capsInfo_[dnode] = info;
 		emit registered(spec);
 	}
 }
@@ -226,7 +242,7 @@ void CapsRegistry::registerCaps(const Ca
 /**
  * \brief Checks if capabilities have been registered.
  */
-bool CapsRegistry::isRegistered(const CapsSpec& spec) const
+bool CapsRegistry::isRegistered(const QString& spec) const
 {
 	return capsInfo_.contains(spec);
 }
@@ -235,7 +251,7 @@ bool CapsRegistry::isRegistered(const Ca
 /**
  * \brief Retrieves the features of a given caps spec.
  */
-XMPP::Features CapsRegistry::features(const CapsSpec& spec) const
+XMPP::Features CapsRegistry::features(const QString& spec) const
 {
 	return capsInfo_[spec].features();
 }
@@ -243,7 +259,12 @@ XMPP::Features CapsRegistry::features(co
 /**
  * \brief Retrieves the identities of a given caps spec.
  */
-XMPP::DiscoItem::Identities CapsRegistry::identities(const CapsSpec& spec) const
+XMPP::DiscoItem::Identities CapsRegistry::identities(const QString& spec) const
 {
 	return capsInfo_[spec].identities();
 }
+
+const XMPP::DiscoExtList &CapsRegistry::extensions(const QString &spec) const
+{
+	return capsInfo_[spec].extensions();
+}
--- psi.orig/src/capabilities/capsregistry.h
+++ psi/src/capabilities/capsregistry.h
@@ -43,10 +43,11 @@ class CapsRegistry : public QObject
 public:
 	CapsRegistry();
 
-	void registerCaps(const CapsSpec&, const XMPP::DiscoItem::Identities&, const XMPP::Features& features);
-	bool isRegistered(const CapsSpec&) const;
-	XMPP::Features features(const CapsSpec&) const;
-	XMPP::DiscoItem::Identities identities(const CapsSpec&) const;
+	void registerCaps(const CapsSpec&, const XMPP::DiscoItem::Identities&, const XMPP::Features& features,const XMPP::DiscoExtList& exts);
+	bool isRegistered(const QString &) const;
+	XMPP::Features features(const QString&) const;
+	XMPP::DiscoItem::Identities identities(const QString&) const;
+	const XMPP::DiscoExtList &extensions(const QString& spec) const;
 
 signals:
 	void registered(const CapsSpec&);
@@ -62,9 +63,11 @@ private:
 			CapsInfo();
 			const XMPP::Features& features() const;
 			const XMPP::DiscoItem::Identities& identities() const;
+			const XMPP::DiscoExtList& extensions() const;
 
 			void setIdentities(const XMPP::DiscoItem::Identities&);
 			void setFeatures(const XMPP::Features&);
+			void setExtensions(const XMPP::DiscoExtList&);
 
 			QDomElement toXml(QDomDocument *) const;
 			void fromXml(const QDomElement&);
@@ -75,9 +78,10 @@ private:
 		private:
 			XMPP::Features features_;
 			XMPP::DiscoItem::Identities identities_;
+			XMPP::DiscoExtList extensions_;
 			QDateTime lastSeen_;
 	};
-	QMap<CapsSpec,CapsInfo> capsInfo_;
+	QMap<QString,CapsInfo> capsInfo_;
 };
 
 
--- psi.orig/src/capabilities/capsspec.cpp
+++ psi/src/capabilities/capsspec.cpp
@@ -44,8 +44,17 @@ CapsSpec::CapsSpec()
  * @param ven the version
  * @param ext the list of extensions (separated by spaces)
  */
-CapsSpec::CapsSpec(const QString& node, const QString& ver, const QString& ext) : node_(node), ver_(ver), ext_(ext)
+CapsSpec::CapsSpec(const QString& node, const QString& ver, const QString& ext, const QString& hashAlgo)
+	: node_(node)
+	, ver_(ver)
+	, ext_(ext)
+	, hashAlgo_(hashAlgo)
 {
+	if (!hashAlgo.isEmpty()) { // XEP-0115
+		hashVal_ = ver;
+		ver_ = QString();
+		ext_ = QString(); // this attribute is deprecated in XEP-0115
+	}
 }
 
 
@@ -75,6 +84,17 @@ const QString& CapsSpec::extensions() co
 	return ext_;
 }
 
+const QString& CapsSpec::hashAlgorithm() const
+{
+	return hashAlgo_;
+}
+
+
+const QString& CapsSpec::hash() const
+{
+	return hashVal_;
+}
+
 
 /**
  * \brief Flattens the caps specification into the set of 'simple'
@@ -88,13 +108,20 @@ const QString& CapsSpec::extensions() co
  *	node=http://psi-im.org, ver=0.10, ext=achat
  *	node=http://psi-im.org, ver=0.10, ext=vchat
  */
-CapsSpecs CapsSpec::flatten() const
+QStringList CapsSpec::flatten(bool withExt) const
 {
-	CapsSpecs l;
-	l.append(CapsSpec(node(),version(),version()));
-	QStringList exts(extensions().split(' ',QString::SkipEmptyParts));
-	for (QStringList::ConstIterator i = exts.begin(); i != exts.end(); ++i) {
-		l.append(CapsSpec(node(),version(),*i));
+	QStringList l;
+	if (!hashAlgo_.isEmpty()) {
+		l.append(node_ + "#" + hashVal_);
+	}
+	else {
+		l.append(node_ + "#" + ver_);
+	}
+	if (withExt) {
+		QStringList exts(extensions().split(' ',QString::SkipEmptyParts));
+		for (QStringList::ConstIterator i = exts.begin(); i != exts.end(); ++i) {
+			l.append(node_ + "#" + *i);
+		}
 	}
 	return l;
 }
--- psi.orig/src/capabilities/capsspec.h
+++ psi/src/capabilities/capsspec.h
@@ -25,24 +25,26 @@
 #include <QString>
 
 class CapsSpec;
-typedef QList<CapsSpec> CapsSpecs;
+typedef QList<CapsSpec> CapsSpecs; // TODO REMOVE
 
 class CapsSpec
 {
 	public:
 		CapsSpec();
-		CapsSpec(const QString&, const QString&, const QString&);
+		CapsSpec(const QString&, const QString&, const QString&, const QString&);
 		const QString& node() const;
 		const QString& version() const;
 		const QString& extensions() const;
-		CapsSpecs flatten() const;
+		const QString& hashAlgorithm() const;
+		const QString& hash() const;
+		QStringList flatten(bool withExt = true) const;
 
 		bool operator==(const CapsSpec&) const;
 		bool operator!=(const CapsSpec&) const;
 		bool operator<(const CapsSpec&) const;
 
 	private:
-		QString node_, ver_, ext_;
+		QString node_, ver_, ext_, hashAlgo_, hashVal_;
 };
 
 
--- psi.orig/src/groupchatdlg.cpp
+++ psi/src/groupchatdlg.cpp
@@ -1659,7 +1659,7 @@ void GCMainDlg::presence(const QString &
 
 	if (!s.capsNode().isEmpty()) {
 		Jid caps_jid(s.mucItem().jid().isEmpty() || !d->nonAnonymous ? Jid(jid()).withResource(nick) : s.mucItem().jid());
-		account()->capsManager()->updateCaps(caps_jid,s.capsNode(),s.capsVersion(),s.capsExt());
+		account()->capsManager()->updateCaps(caps_jid,s.capsNode(),s.capsVersion(),s.capsExt(),s.capsHashAlgorithm());
 	}
 
 	if(!nick.isEmpty())
--- psi.orig/src/psiaccount.cpp
+++ psi/src/psiaccount.cpp
@@ -2557,7 +2557,7 @@ void PsiAccount::client_resourceAvailabl
 			if(local)
 				ur.setClient(ApplicationInfo::name(),ApplicationInfo::version(),SystemInfo::instance()->os());
 			else
-				ur.setClient(capsManager()->clientName(j),capsManager()->clientVersion(j),"");
+				ur.setClient(capsManager()->clientName(j),capsManager()->clientVersion(j),capsManager()->osVersion(j));
 
 			u->userResourceList().append(ur);
 			rp = &u->userResourceList().last();
@@ -2621,13 +2621,13 @@ void PsiAccount::client_resourceAvailabl
 	// Update entity capabilities.
 	// This has to happen after the userlist item has been created.
 	if (!r.status().capsNode().isEmpty()) {
-		capsManager()->updateCaps(j,r.status().capsNode(),r.status().capsVersion(),r.status().capsExt());
+		capsManager()->updateCaps(j,r.status().capsNode(),r.status().capsVersion(),r.status().capsExt(),r.status().capsHashAlgorithm());
 
 		// Update the client version
 		foreach(UserListItem* u, findRelevant(j)) {
 			UserResourceList::Iterator rit = u->userResourceList().find(j.resource());
 			if (rit != u->userResourceList().end()) {
-				(*rit).setClient(capsManager()->clientName(j),capsManager()->clientVersion(j),"");
+				(*rit).setClient(capsManager()->clientName(j),capsManager()->clientVersion(j),capsManager()->osVersion(j));
 				//(*rit).setClient(QString(),QString(),"");
 				cpUpdate(*u,(*rit).name());
 			}
@@ -3182,14 +3182,19 @@ void PsiAccount::capsChanged(const Jid&
 		return;
 
 	QString name = capsManager()->clientName(j);
-	QString version = (name.isEmpty() ? QString() : capsManager()->clientVersion(j));
+	QString version;
+	QString os;
+	if (!name.isEmpty()) {
+		version = capsManager()->clientVersion(j);
+		os = capsManager()->osVersion(j);
+	}
 
 	foreach(UserListItem *u, findRelevant(j)) {
 		UserResourceList::Iterator rit = u->userResourceList().find(j.resource());
 		bool found = (rit == u->userResourceList().end()) ? false: true;
 		if(!found)
 			continue;
-		(*rit).setClient(name,version,"");
+		(*rit).setClient(name,version,os);
 		//(*rit).setClient(QString(),QString(),"");
 		cpUpdate(*u);
 	}
--- psi.orig/src/psicon.cpp
+++ psi/src/psicon.cpp
@@ -772,9 +772,10 @@ void PsiCon::registerCaps(const QString&
 	identities += identity;
 
 	d->capsRegistry->registerCaps(CapsSpec(ApplicationInfo::capsNode(),
-										   ApplicationInfo::capsVersion(), ext),
+										   ApplicationInfo::capsVersion(), ext, QString()),
 								  identities,
-								  Features(features));
+								  Features(features),
+								  XMPP::DiscoExtList());
 }
 
 void PsiCon::deinit()
